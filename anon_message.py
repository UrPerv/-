import telegram
from state import group_rooms, global_nicknames, user_nicknames, nickname_counter, user_profiles, user_group
from database import save_profile, load_profile, delete_profile as db_delete_profile, init_db, save_room_settings, load_room_settings, ban_user_in_room, save_global_nick, save_room_link, load_room_link, restore_all_users, restore_rooms, clear_room_link, remove_room_member, save_room_member
import re
from telegram import Update, InputMediaPhoto, InputMediaVideo, InputMediaDocument, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from telegram.constants import ParseMode
import os
from dotenv import load_dotenv
import time
import random
import string
from datetime import time as dt_time
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("db.env")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –û—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–∏—Å–∫ –∏ –ø–∞—Ä—ã —á–∞—Ç–æ–≤
waiting_users = set()  # —Å–ø–∏—Å–æ–∫ chat_id
chat_pairs = {}  # {chat_id: partner_chat_id}
user_interests: dict[int, set[str]] = {}
last_seen = {}

# –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏: {link_code: chat_id}
private_links = {}
link_owners = {}  # {chat_id: link_code}

# –°–ø–∞–º-–∫–æ–Ω—Ç—Ä–æ–ª—å
SPAM_LIMIT = 15
SPAM_INTERVAL = 10  # —Å–µ–∫—É–Ω–¥
BLOCK_DURATION = 600  # —Å–µ–∫—É–Ω–¥
message_timestamps = {}
blocked_users = {}

# –ê–ª—å–±–æ–º—ã: {chat_id: {"media": [...], "timeout": Job, "caption": str}}
pending_albums = {}
ALBUM_TIMEOUT = 10  # —Å–µ–∫—É–Ω–¥
bot_username = "Djbsyshsb_bot"

# –ì—Ä—É–ø–ø–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã
user_states = {}
custom_nicknames = {}  # {chat_id: nickname}
GROUP_LIFETIME = 86400  # 24 —á–∞—Å–∞

def is_active_hours():
    now = time.localtime()
    return dt_time(9, 0) <= dt_time(now.tm_hour, now.tm_min) <= dt_time(23, 0)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    now = datetime.now()
    online_users = sum(1 for t in last_seen.values() if now - t < timedelta(minutes=10))
    searching = len(waiting_users)

    await message.reply_text(
        f"üë• –û–Ω–ª–∞–π–Ω: {online_users}\nüîé –í –ø–æ–∏—Å–∫–µ: {searching}"
    )

def is_moderator(chat_id, context):
    code = user_group.get(chat_id)
    if not code:
        return False
    room = group_rooms.get(code)
    if not room:
        return False
    return room.get("moderator") == chat_id


def get_stats_text():
    now = datetime.now()
    online_users = sum(1 for t in last_seen.values() if now - t < timedelta(minutes=10))
    searching = len(waiting_users)
    return f"üë• –û–Ω–ª–∞–π–Ω: {online_users}\nüîé –í –ø–æ–∏—Å–∫–µ: {searching}\n"

#################################–ö–æ–º–Ω–∞—Ç–∞
async def create_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args or []
    with_mod = 'mod' in args
    chat_id = update.effective_chat.id

    message = (
        update.message
        or (update.callback_query.message if update.callback_query else None)
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if is_user_busy(chat_id, context):
        if message:
            await message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (/stop).")
        return

    if context.user_data.get("profile_creating"):
        if message:
            await message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        if message:
            await message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç—ã
    code = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
    created = time.time()

    group_rooms[code] = {
        "members": {},
        "moderator": chat_id if with_mod else None,
        "muted": set(),
        "banned": set(),
        "with_moderation": with_mod,
        "welcome": None,
        "is_open": True,
        "is_private": True,
        "description": "",
        "created": created,
    }
    nickname_counter[code] = 0

    # === –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î ===
    from database import save_room_settings
    save_room_settings(
        room_code=code,
        welcome_message=None,
        short_description="",
        created=created,
        moderator_id=chat_id if with_mod else None,
        is_open=True,
        is_private=True
    )

    link = f"https://t.me/{bot_username}?start=group_{code}"

    if message:
        await message.reply_text(
            f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ {'–º–æ–¥–µ—Ä–∏—Ä—É–µ–º—É—é ' if with_mod else ''}–≥—Ä—É–ø–ø–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É:\n{link}"
        )
    await send_main_menu(update, context)


async def make_private(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    message = update.message or update.callback_query.message

    code = user_group.get(chat_id)
    if not code or code not in group_rooms:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ.")
        return

    room = group_rooms[code]
    room["is_private"] = True
    await update.message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ —Ç–µ–ø–µ—Ä—å —Å–∫—Ä—ã—Ç–∞ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞.")


async def make_public(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    message = update.message or update.callback_query.message

    code = user_group.get(chat_id)
    if not code or code not in group_rooms:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ.")
        return

    room = group_rooms[code]
    room["is_private"] = False
    await update.message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω–∞ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ.")

    if not room or room.get("moderator") != chat_id:
        await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
        return


async def announce(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    if not message:
        return

    chat_id = message.chat_id

    code = user_group.get(chat_id)
    if not code:
        await message.reply_text("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ.")
        return

    room = group_rooms.get(code)
    if not room or room.get("moderator") != chat_id:
        await message.reply_text("–¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
        return

    if not context.args:
        await message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/announce –°–µ–≥–æ–¥–Ω—è –æ–±—Å—É–∂–¥–∞–µ–º —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é.")
        return

    announcement = "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n" + " ".join(context.args)

    for uid in room["members"]:
        if uid == chat_id:
            continue
        try:
            await context.bot.send_message(chat_id=uid, text=announcement)
        except:
            pass

    await message.reply_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã.")


async def set_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    room_code = user_group.get(chat_id)

    if not room_code:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ.")
        return

    room = group_rooms.get(room_code)
    if not room or room.get("moderator") != chat_id:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.")
        return

    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: /set_description [—Ç–µ–∫—Å—Ç]")
        return

    description = " ".join(context.args).strip()
    room["description"] = description[:100]  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ welcome –∏ description
    welcome = room.get("welcome") or ""
    save_room_settings(room_code, welcome, room["description"])

    await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")


async def list_active_rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    message = update.message or update.callback_query.message
    if not message:
        return

    chat_id = message.chat_id

    if not group_rooms:
        await message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.")
        return

    now = time.time()
    text = ""
    count = 0

    for code, room in group_rooms.items():
        if room.get("is_private"):
            continue
        if now - room["created"] > GROUP_LIFETIME:
            continue
        if not room["members"]:
            continue

        members_count = len(room["members"])
        is_mod = room.get("with_moderation", False)
        mod_tag = "üëÆ" if is_mod else "üë•"
        link = f"https://t.me/{bot_username}?start=group_{code}"
        room_info = load_room_settings(code)
        description = room_info.get("short_description", "") if room_info else ""

        text += f"{mod_tag} [–ö–æ–º–Ω–∞—Ç–∞ {count+1}]({link}) ‚Äî {members_count} —á–µ–ª.\n"
        if description:
            text += f"_–û–ø–∏—Å–∞–Ω–∏–µ_: {description}\n"
        text += "\n"

        count += 1

    if count == 0:
        await message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.")
        return

    await message.reply_text("üìÉ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:\n\n" + text, parse_mode=ParseMode.MARKDOWN)

async def join_group(update: Update, context: ContextTypes.DEFAULT_TYPE, code: str):
    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    if is_user_busy(chat_id, context):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (/stop).")
        return

    room = group_rooms.get(code)
    if not room:
        await update.message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    if not room.get("is_open", True):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ —Å–µ–π—á–∞—Å –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    welcome = room.get("welcome")
    if welcome:
        await safe_send(context.bot, chat_id, "send_message", text=welcome)

    if chat_id in room['banned']:
        await update.message.reply_text("–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.")
        return

    if chat_id in room['members']:
        await update.message.reply_text("–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.")
        return

    await leave_group(chat_id, context)

    # === –í—ã–±–æ—Ä –Ω–∏–∫–∞ ===
    nickname = user_nicknames.get(chat_id)

    if not nickname:
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∏–∫ –∏–∑ –±–∞–∑—ã
        from database import load_global_nick  # –∏–º–ø–æ—Ä—Ç –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–µ –≤–≤–µ—Ä—Ö—É
        nickname = load_global_nick(chat_id)
        if nickname:
            user_nicknames[chat_id] = nickname
            global_nicknames[chat_id] = nickname

    if not nickname:
        link = load_room_link(chat_id)
        if link:
            nickname = link["nickname_in_room"]

    if not nickname:
        if code not in nickname_counter:
            nickname_counter[code] = 0
        nickname_counter[code] += 1
        nickname = f"–ê–Ω–æ–Ω–∏–º ‚Ññ{nickname_counter[code]}"

    # === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ===
    room['members'][chat_id] = nickname
    user_group[chat_id] = code
    custom_nicknames[chat_id] = nickname

    save_room_member(code, chat_id, nickname)
    save_room_link(chat_id, code, code, nickname)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    if room.get("moderator") == chat_id:
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                "üõ° –í—ã ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–∏—Å–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é.\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /mod - —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ –≤ /help (—á–∏—Ç–∞—Ç—å '–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–Ω–∞—Ç—ã')"
            )
        )

    # –û–ø–æ–≤–µ—â–∞–µ–º –¥—Ä—É–≥–∏—Ö
    for uid in list(room['members']):
        if uid != chat_id:
            await safe_send(context.bot, uid, "send_message", text=f"{nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è.")

    names = "\n".join(room["members"].values())
    mod_note = "\n(–° –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π)" if room.get("with_moderation") else ""
    await update.message.reply_text(f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ.{mod_note}\n–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{names}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏–º
    profile = user_profiles.get(chat_id)
    if profile:
        text = profile.get('text', '')
        media_id = profile.get('media_id')
        media_type = profile.get('media_type')
        for uid in list(room['members']):
            if uid != chat_id:
                if media_id:
                    if media_type == 'photo':
                        await safe_send(context.bot, uid, "send_photo", photo=media_id,
                                        caption=f"–ê–Ω–∫–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n{text}")
                    elif media_type == 'video':
                        await safe_send(context.bot, uid, "send_video", video=media_id,
                                        caption=f"–ê–Ω–∫–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n{text}")
                elif text:
                    await safe_send(context.bot, uid, "send_message", text=f"–ê–Ω–∫–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n{text}")



async def mod_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    message = update.message or update.callback_query.message
    chat_id = message.chat_id
    code = user_group.get(chat_id)
    room = group_rooms.get(code)
    if not room or room.get("moderator") != chat_id:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
        return
    await update.message.reply_text(
        "/kick <–Ω–∏–∫> ‚Äî –≤—ã–≥–Ω–∞—Ç—å\n"
        "/mute <–Ω–∏–∫> ‚Äî –∑–∞–º—É—Ç–∏—Ç—å\n"
        "/unmute <–Ω–∏–∫> ‚Äî —Ä–∞–∑–º—É—Ç–∏—Ç—å\n"
        "/ban <–Ω–∏–∫> ‚Äî –∑–∞–±–∞–Ω–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞\n"
        "/delete_group ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É"
    )


async def kick_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await mod_action(update, context, action="kick")


async def mute_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await mod_action(update, context, action="mute")


async def unmute_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await mod_action(update, context, action="unmute")


async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await mod_action(update, context, action="ban")


async def delete_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    code = user_group.get(chat_id)
    room = group_rooms.get(code)
    if not room or room.get("moderator") != chat_id:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
        return
    for uid in list(room['members']):
        await safe_send(context.bot, uid, "send_message", text="–ö–æ–º–Ω–∞—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        user_group.pop(uid, None)
        custom_nicknames.pop(uid, None)
    group_rooms.pop(code, None)
    await update.message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")


async def set_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    code = user_group.get(chat_id)
    if not code or code not in group_rooms:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ.")
        return

    room = group_rooms[code]
    if room.get("moderator") != chat_id:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.")
        return

    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä:\n/set_welcome –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å...")
        return

    welcome_text = update.message.text.split(maxsplit=1)[1].strip()
    room["welcome"] = welcome_text
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    save_room_settings(code, room["welcome"])

async def preview_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    code = user_group.get(chat_id)
    if not code or code not in group_rooms:
        await update.message.reply_text("–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ.")
        return

    room = group_rooms[code]
    if chat_id != room.get("moderator"):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.")
        return

    welcome = room.get("welcome")
    if welcome:
        await update.message.reply_text(f"–¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:\n{welcome}")
    else:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


async def close_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    code = user_group.get(chat_id)
    if not code or code not in group_rooms:
        await message.reply_text("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ.")
        return

    room = group_rooms[code]
    if room.get("moderator") != chat_id:
        await message.reply_text("–¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É.")
        return

    room["is_open"] = False
    await message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞. –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")


async def open_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    code = user_group.get(chat_id)
    if not code or code not in group_rooms:
        await message.reply_text("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ.")
        return

    room = group_rooms[code]
    if room.get("moderator") != chat_id:
        await message.reply_text("–¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É.")
        return

    room["is_open"] = True
    await message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")


async def mod_action(update: Update, context: ContextTypes.DEFAULT_TYPE, action):
    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    if context.user_data.get("profile_creating"):
        await message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    code = user_group.get(chat_id)
    room = group_rooms.get(code)

    if not room or room.get("moderator") != chat_id:
        await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not context.args:
        await message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    target_nick = " ".join(context.args).strip().lower()
    target_id = None

    for uid, nick in room["members"].items():
        if nick.strip().lower() == target_nick:
            target_id = uid
            break

    if not target_id:
        await message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if target_id == chat_id:
        await message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∫ —Å–µ–±–µ.")
        return

    if action == "kick":
        room['members'].pop(target_id, None)
        user_group.pop(target_id, None)
        custom_nicknames.pop(target_id, None)
        await safe_send(context.bot, target_id, "send_message", text="–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")

    elif action == "mute":
        room.setdefault('muted', set())
        room['muted'].add(target_id)
        await safe_send(context.bot, target_id, "send_message", text="–í—ã –±—ã–ª–∏ –∑–∞–≥–ª—É—à–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")

    elif action == "unmute":
        room.setdefault('muted', set())
        room['muted'].discard(target_id)
        await safe_send(context.bot, target_id, "send_message", text="–í—ã –±—ã–ª–∏ —Ä–∞–∑–º—É—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")

    elif action == "ban":
        room['banned'].add(target_id)
        ban_user_in_room(target_id, code)
        room['members'].pop(target_id, None)
        user_group.pop(target_id, None)
        custom_nicknames.pop(target_id, None)
        await safe_send(context.bot, target_id, "send_message", text="–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")

    await update.message.reply_text(f"{action.capitalize()} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")


async def change_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    if chat_id not in user_group:
        await message.reply_text("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ.")
        return

    code = user_group[chat_id]
    room = group_rooms.get(code)
    if not room:
        await message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    new_nick = " ".join(context.args).strip()

    if len(new_nick) > 50:
        return await update.message.reply_text("–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.")

    if not new_nick:
        await message.reply_text("–ù–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    if new_nick in room['members'].values():
        await message.reply_text("–¢–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ.")
        return

    old_nick = room['members'].get(chat_id, "–ê–Ω–æ–Ω–∏–º")
    room['members'][chat_id] = new_nick

    await message.reply_text(f"–í–∞—à –Ω–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_nick}")
    for uid in room['members']:
        if uid != chat_id:
            await safe_send(context.bot, uid, "send_message", text=f"{old_nick} —Å–º–µ–Ω–∏–ª –Ω–∏–∫ –Ω–∞ {new_nick}")

    updated_names = "\n".join([
        f"{nick}" for uid, nick in room["members"].items()
    ])


async def set_global_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    new_nick = " ".join(context.args).strip()

    if not new_nick:
        await update.message.reply_text("–ù–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    if new_nick.lower().startswith("–∞–Ω–æ–Ω–∏–º"):
        await safe_send(context.bot, chat_id, "send_message", text="–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–∞.")
        return

    if any(nick == new_nick for nick in user_nicknames.values()):
        await update.message.reply_text("–¢–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")
        return

    user_nicknames[chat_id] = new_nick
    save_global_nick(chat_id, new_nick)  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫ –≤ –ë–î
    await update.message.reply_text(f"–í–∞—à –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_nick}")


async def safe_send(bot, chat_id, method, **kwargs):
    try:
        return await getattr(bot, method)(chat_id=chat_id, **kwargs)
    except telegram.error.Forbidden:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        code = user_group.get(chat_id)
        if code and code in group_rooms:
            room = group_rooms[code]
            nickname = room["members"].pop(chat_id, "–ê–Ω–æ–Ω–∏–º")
            user_group.pop(chat_id, None)
            custom_nicknames.pop(chat_id, None)

            for uid in list(room["members"]):
                await safe_send(bot, uid, "send_message", text=f"{nickname} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É.")

async def group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    message = update.message
    chat_id = message.chat_id
    last_seen[chat_id] = datetime.now()

    if chat_id not in user_group:
        return

    code = user_group[chat_id]
    room = group_rooms.get(code)
    if not room:
        return

    if ban_user_in_room(chat_id, code):
        await update.message.reply_text("–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.")
        return

    if chat_id in room.get("muted", set()):
        await safe_send(context.bot, chat_id, "send_message", text="–í—ã –∑–∞–º—É—á–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    nickname = room['members'].get(chat_id, "–ê–Ω–æ–Ω–∏–º")
    suffix = f"\n–û—Ç–ø—Ä–∞–≤–∏–ª {nickname}"

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–∏–∫—É ===
    if message.text:
        msg = message.text.strip()

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ @"–Ω–∏–∫ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏" –∏–ª–∏ @–Ω–∏–∫
        match = re.match(r'^@(?:"([^"]+)"|(\S+))\s+(.+)', msg)
        if match:
            target_nick = match.group(1) or match.group(2)
            private_msg = match.group(3)

            target_id = None
            for uid, name in room['members'].items():
                if name.lower() == target_nick.lower():
                    target_id = uid
                    break

            if target_id and target_id != chat_id:
                await safe_send(context.bot, target_id, "send_message",
                                text=f"[–ü—Ä–∏–≤–∞—Ç] {nickname}: {private_msg}")
                await safe_send(context.bot, chat_id, "send_message",
                                text=f"[–ü—Ä–∏–≤–∞—Ç ‚Üí {room['members'][target_id]}]: {private_msg}")
                return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ ---
    if message.media_group_id:
        if chat_id not in pending_albums:
            pending_albums[chat_id] = {
                "media": [],
                "timeout": None,
                "caption": None,
                "group_code": code,
                "sender_nickname": nickname
            }

        album = pending_albums[chat_id]
        if message.caption:
            album["caption"] = message.caption

        if message.photo:
            album["media"].append(InputMediaPhoto(message.photo[-1].file_id))
        elif message.video:
            album["media"].append(InputMediaVideo(message.video.file_id))
        elif message.document:
            album["media"].append(InputMediaDocument(message.document.file_id))

        jobs = context.job_queue.get_jobs_by_name(f"album_{chat_id}")
        for job in jobs:
            job.schedule_removal()

        album["timeout"] = context.job_queue.run_once(
            send_album_group, ALBUM_TIMEOUT, chat_id=chat_id, name=f"album_{chat_id}", data=code
        )
        return

    # --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å ---
    caption_or_text = message.text or message.caption

    if caption_or_text:
        text_msg = f"{nickname}: {caption_or_text}"
        for uid in room['members']:
            if uid != chat_id:
                await safe_send(context.bot, uid, "send_message", text=text_msg)

    if message.photo:
        for uid in room['members']:
            if uid != chat_id:
                await safe_send(
                    context.bot, uid, "send_photo",
                    photo=message.photo[-1].file_id,
                    caption=f"{message.caption or ''}{suffix}"
                )

    elif message.video:
        for uid in room['members']:
            if uid != chat_id:
                await safe_send(
                    context.bot, uid, "send_video",
                    video=message.video.file_id,
                    caption=f"{message.caption or ''}{suffix}"
                )

    elif message.document:
        for uid in room['members']:
            if uid != chat_id:
                await safe_send(
                    context.bot, uid, "send_document",
                    document=message.document.file_id,
                    caption=f"{message.caption or ''}{suffix}"
                )

    elif message.voice:
        for uid in room['members']:
            if uid != chat_id:
                await safe_send(context.bot, uid, "send_voice", voice=message.voice.file_id)
                await safe_send(context.bot, uid, "send_message", text=suffix)

    elif message.sticker:
        for uid in room['members']:
            if uid != chat_id:
                await safe_send(context.bot, uid, "send_sticker", sticker=message.sticker.file_id)
                await safe_send(context.bot, uid, "send_message", text=suffix)

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    if chat_id not in user_group:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ.")
        return

    code = user_group[chat_id]
    room = group_rooms.get(code)
    if not room:
        await update.message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    members = room.get("members", {})
    if not members:
        await message.reply_text("–í —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ —Å–µ–π—á–∞—Å –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.")
        return

    names = "\n".join(members.values())
    await message.reply_text(f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{names}")

async def send_album_group(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    code = job.data
    if chat_id not in pending_albums:
        return
    album_data = pending_albums.pop(chat_id)
    media = album_data["media"]
    nickname = album_data.get("sender_nickname", "–ê–Ω–æ–Ω–∏–º")
    user_caption = album_data["caption"]
    nickname = album_data.get("sender_nickname", "–ê–Ω–æ–Ω–∏–º")
    if user_caption:
        caption = f"{user_caption}\n–û—Ç–ø—Ä–∞–≤–∏–ª {nickname}"
    else:
        caption = f"–û—Ç–ø—Ä–∞–≤–∏–ª {nickname}"

    room = group_rooms.get(code)
    if not media or not room:
        return
    if caption:
        first = media[0]
        if isinstance(first, InputMediaPhoto):
            media[0] = InputMediaPhoto(media=first.media, caption=caption)
        elif isinstance(first, InputMediaVideo):
            media[0] = InputMediaVideo(media=first.media, caption=caption)
        elif isinstance(first, InputMediaDocument):
            media[0] = InputMediaDocument(media=first.media, caption=caption)
    for uid in list(room['members']):
        if uid != chat_id:
            await safe_send(context.bot, uid, "send_media_group", media=media)


#################################################################################

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    message = update.message or update.callback_query.message

    await message.reply_text(
        "üÜò <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>\n\n"
        "<b>–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        "/start ‚Äì –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/search ‚Äì –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/interests - –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–≥–æ –∂–µ\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ç–æ —Å–µ–π—á–∞—Å –≤ –ø–æ—Ç—Å–∫–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/stop ‚Äì –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/profile ‚Äì —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n"
        "/my_profile ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É\n"
        "/delete_profile - —É–¥–∞–ª–∏—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É\n"
        "/create_link ‚Äì —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –¥–∏–∞–ª–æ–≥–∞\n\n"
        "<b>–ì—Ä—É–ø–ø—ã:</b>\n"
        "/create_group ‚Äì —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É\n"
        "/stop ‚Äì –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É\n"
        "/nick ‚Äì —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –Ω–∏–∫\n"
        "/set_global_nick - –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∏–∫\n"
        "/view_profile (–Ω–∏–∫) - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/list_users ‚Äì —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        "<b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–Ω–∞—Ç—ã:</b>\n"
        "/ban, /mute, /unmute ‚Äì —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
        "/set_welcome ‚Äì —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/preview_welcome - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ\n"
        "/open_group, /close_group ‚Äì –∑–∞–∫—Ä—ã—Ç—å –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É\n"
        "/make_private - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—ä –∫–æ–º–Ω–∞—Ç (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)\n"
        "/make_public - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç\n"
        "/mod - –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
        "/kick ‚Äì —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã\n"
        "/announce - —Å–¥–µ–ª–∞—Ç—å –æ–±—å—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å–∫—Ä—ã—Ç)\n\n"
        "https://github.com/UrPerv/-.git - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥.\n"
        "https://t.me/Anonimnoe_Soobchenie_bot - –∞–Ω–æ–Ω–∏–º–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∏ –∞–¥–º–∏–Ω–æ–º.",
        parse_mode="HTML"
    )


async def anti_spam(update: Update) -> bool:
    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    now = time.time()

    if chat_id in blocked_users and now < blocked_users[chat_id]:
        try:
            await update.message.reply_text("–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        except:
            pass
        return False
    elif chat_id in blocked_users:
        del blocked_users[chat_id]

    timestamps = message_timestamps.get(chat_id, [])
    timestamps = [t for t in timestamps if now - t < SPAM_INTERVAL]
    timestamps.append(now)
    message_timestamps[chat_id] = timestamps

    if len(timestamps) > SPAM_LIMIT:
        blocked_users[chat_id] = now + BLOCK_DURATION
        try:
            await update.message.reply_text("–í—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º.")
        except:
            pass
        return False

    return True


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    if context.args:
        arg = context.args[0]
        if arg.startswith("join_"):
            code = arg[5:]
            await join_via_code(update, context, code)
            return
        elif arg.startswith("group_"):
            code = arg[6:]
            await join_group(update, context, code)
            return

    keyboard = [
        [
            InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="search"),
            InlineKeyboardButton("üë• –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data="create_group")
        ],
        [
            InlineKeyboardButton("üìù –ê–Ω–∫–µ—Ç–∞", callback_data="profile"),
            InlineKeyboardButton("üìÑ –ú–æ—è –∞–Ω–∫–µ—Ç–∞", callback_data="my_profile")
        ],
        [
            InlineKeyboardButton("üîó –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="create_link"),
            InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help")
        ],
        [
            InlineKeyboardButton("üìÉ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="list_rooms")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await delete_previous_menu(update, context)

    text = get_stats_text() + "\n–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å–µ—Ç—å.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    msg = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup
    )
    context.user_data["menu_msg_id"] = msg.message_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ –ø–æ–∏—Å–∫–∞
    if context.user_data.get("profile_creating"):
        await query.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await query.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    action = query.data

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã
    if action == "create_group":
        keyboard = [
            [
                InlineKeyboardButton("üë• –ö–æ–º–Ω–∞—Ç–∞ –±–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="create_group_nomod"),
                InlineKeyboardButton("üëÆ –ö–æ–º–Ω–∞—Ç–∞ —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π", callback_data="create_group_mod")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
        except:
            pass
        msg = await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data["menu_msg_id"] = msg.message_id
        return

    # –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if action == "back_to_menu":
        await send_main_menu(update, context)
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    if action in ["create_group_nomod", "create_group_mod"]:
        context.args = [] if action == "create_group_nomod" else ["mod"]
        await create_group(update, context)
        return

    # –ü—Ä–æ—á–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    if action == "search":
        await search(update, context)
    elif action == "profile":
        await profile(update, context)
    elif action == "my_profile":
        await my_profile(update, context)
    elif action == "create_link":
        await create_link(update, context)
    elif action == "help":
        await help_command(update, context)
    elif action == "list_rooms":
        await list_active_rooms(update, context)



async def delete_previous_menu(update, context):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    chat_id = update.effective_chat.id
    msg_id = context.user_data.get("menu_msg_id")
    if msg_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except:
            pass


async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    chat_id = update.effective_chat.id if isinstance(update, Update) else update

    keyboard = [
        [
            InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="search"),
            InlineKeyboardButton("üë• –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data="create_group")
        ],
        [
            InlineKeyboardButton("üìù –ê–Ω–∫–µ—Ç–∞", callback_data="profile"),
            InlineKeyboardButton("üìÑ –ú–æ—è –∞–Ω–∫–µ—Ç–∞", callback_data="my_profile")
        ],
        [
            InlineKeyboardButton("üîó –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="create_link"),
            InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help")
        ],
        [
            InlineKeyboardButton("üìÉ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="list_rooms")
        ],

    ]

    try:
        if "menu_msg_id" in context.user_data:
            await context.bot.delete_message(chat_id=chat_id, message_id=context.user_data["menu_msg_id"])
    except:
        pass

    msg = await context.bot.send_message(
        chat_id=chat_id,
        text = get_stats_text() + "\n–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data["menu_msg_id"] = msg.message_id


############################### –ê–Ω–∫–µ—Ç–∞
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    if context.user_data.get("searching"):
        await message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    if is_user_busy(chat_id, context):
        await message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (/stop).")
        return

    if is_user_busy(chat_id, context):
        await message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (/stop).")
        return

    try:
        await message.delete()
    except:
        pass

    context.user_data['profile_creating'] = True  # ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–ª–∞–≥

    await context.bot.send_message(
        chat_id=chat_id,
        text="–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É (—Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏).\n\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∞–Ω–∫–µ—Ç—É"
    )


async def handle_profile_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user_id = update.effective_user.id

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
    if not context.user_data.get("profile_creating"):
        return

    if message.text == "/stop":
        context.user_data.pop("profile_creating", None)
        sent = await stop(update, context)
        if not sent:
            await message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –∞–Ω–∫–µ—Ç—ã.")
        return

    text = message.text or message.caption or ""
    media_id = None
    media_type = None

    if message.photo:
        media_id = message.photo[-1].file_id
        media_type = "photo"
    elif message.video:
        media_id = message.video.file_id
        media_type = "video"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SQLite
    save_profile(user_id, text.strip(), media_id, media_type)

    context.user_data.pop("profile_creating", None)
    await message.reply_text("–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n/delete_profile - —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
    await send_main_menu(update, context)


async def my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    user_id = update.effective_user.id
    chat_id = update.effective_chat.id  # ‚Üê –í–û–¢ –û–ù
    query = update.callback_query

    profile = load_profile(user_id)

    if profile:
        text = profile.get("text", "")
        media_id = profile.get("media_id")
        media_type = profile.get("media_type")

        if media_id:
            if media_type == "photo":
                await context.bot.send_photo(chat_id=chat_id, photo=media_id, caption=text)
            elif media_type == "video":
                await context.bot.send_video(chat_id=chat_id, video=media_id, caption=text)
        else:
            await context.bot.send_message(chat_id=chat_id, text=text)
    else:
        await context.bot.send_message(chat_id=chat_id, text="–£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã.")

    await send_main_menu(update, context)


async def delete_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    if context.user_data.get("searching"):
        await message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    if is_user_busy(chat_id, context):
        await message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (/stop).")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∞–Ω–∫–µ—Ç–∞ –≤ –ë–î
    profile = load_profile(chat_id)
    if profile:
        db_delete_profile(chat_id)
        await message.reply_text("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

async def view_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    if context.user_data.get("profile_creating"):
        await message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    if chat_id not in user_group:
        await message.reply_text("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ.")
        return

    if not context.args:
        await message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä:\n/view_profile –ê–Ω–æ–Ω–∏–º ‚Ññ2")
        return

    code = user_group.get(chat_id)
    room = group_rooms.get(code)

    if not room:
        await message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    target_nick = " ".join(context.args).strip().lower()
    target_id = None

    for uid, nick in room["members"].items():
        if nick.lower() == target_nick:
            target_id = uid
            break

    if not target_id:
        await message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    profile = user_profiles.get(target_id) or load_profile(target_id)
    if not profile:
        await message.reply_text("–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã.")
        return

    text = profile.get("text", "")
    media_id = profile.get("media_id")
    media_type = profile.get("media_type")

    if media_id:
        if media_type == 'photo':
            await context.bot.send_photo(chat_id=chat_id, photo=media_id, caption=f"\n{text}")
        elif media_type == 'video':
            await context.bot.send_video(chat_id=chat_id, video=media_id, caption=f"\n{text}")
    else:
        await message.reply_text(f"\n{text}")

#####################################################################################################

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now()
    online_users = sum(1 for t in last_seen.values() if now - t < timedelta(minutes=10))
    searching = len(waiting_users)

    message = update.message or update.callback_query.message
    if not message:
        return

    chat_id = message.chat_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    if is_user_busy(chat_id, context):
        await message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (/stop).")
        return

    # –£–∂–µ –∏—â–µ—Ç?
    if context.user_data.get("searching"):
        await message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
    if chat_id in link_owners:
        code = link_owners.pop(chat_id)
        private_links.pop(code, None)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–∏—Å–∫–∞
    context.user_data["searching"] = True

    try:
        await message.delete()
    except:
        pass

    # –£–¥–∞–ª—è–µ–º —Å–µ–±—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –î–û —Ü–∏–∫–ª–∞
    waiting_users.discard(chat_id)

    # === –°–õ–£–ß–ê–ô–ù–´–ô –ü–û–ò–°–ö ===
    for uid in list(waiting_users):  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫–æ–ø–∏—è
        if not is_user_busy(uid, context):
            waiting_users.remove(uid)
            await start_chat(chat_id, uid, context)
            return

    # –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
    waiting_users.add(chat_id)

    await context.bot.send_message(
        chat_id=chat_id,
        text=(
            get_stats_text() +
            "\n–û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n\n/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫\n/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        )
    )



async def set_interests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    await message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–Ω–∏–≥–∏, –∏–≥—Ä—ã, –∏—Å–∫—É—Å—Å—Ç–≤–æ):")
    context.user_data["awaiting_interests"] = True

async def create_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    if chat_id in user_group:
        await message.reply_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")
        return

    try:
        msg_id = context.user_data.get("menu_msg_id")
        if msg_id:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
    except:
        pass

    if chat_id in chat_pairs:
        await context.bot.send_message(chat_id=chat_id, text="–í—ã —É–∂–µ –≤ —á–∞—Ç–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if chat_id in link_owners:
        code = link_owners[chat_id]
    else:
        code = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
        private_links[code] = chat_id
        link_owners[chat_id] = code

    link = f"https://t.me/{bot_username}?start=join_{code}"

    await context.bot.send_message(
        chat_id=chat_id,
        text=(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Ç–æ–º—É, —Å –∫–µ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å:\n{link}\n\n–°—Å—ã–ª–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî /cancel_link")
    )

    await send_main_menu(chat_id, context)


async def join_via_code(update: Update, context: ContextTypes.DEFAULT_TYPE, code: str):
    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    if chat_id in chat_pairs:
        await update.message.reply_text("–í—ã —É–∂–µ –≤ —á–∞—Ç–µ. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    if code not in private_links:
        await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.")
        return

    partner_id = private_links.pop(code)
    link_owners.pop(partner_id, None)

    if partner_id == chat_id:
        await update.message.reply_text("–ù–µ–ª—å–∑—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return

    if is_user_busy(partner_id, context):
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç (–≤ –≥—Ä—É–ø–ø–µ, –¥–∏–∞–ª–æ–≥–µ, –ø–æ–∏—Å–∫–µ –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –∞–Ω–∫–µ—Ç—É).")
        return

    if is_user_busy(chat_id, context):
        await update.message.reply_text("–í—ã —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç—ã. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /stop.")
        return

    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    context.user_data.pop("profile_creating", None)
    await start_chat(chat_id, partner_id, context)


async def cancel_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    if chat_id in link_owners:
        code = link_owners.pop(chat_id)
        private_links.pop(code, None)
        await update.message.reply_text("–°—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Å—ã–ª–∫–∏.")


async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    if is_user_busy(chat_id, context):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (/stop).")
        return

    if chat_id in chat_pairs:
        await update.message.reply_text("–í—ã —É–∂–µ –≤ —á–∞—Ç–µ. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /join 123abcXYZ")
        return

    code = context.args[0]
    if code not in private_links:
        await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.")
        return

    partner_id = private_links.pop(code)
    link_owners.pop(partner_id, None)

    if partner_id == chat_id:
        await update.message.reply_text("–ù–µ–ª—å–∑—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return

    await start_chat(chat_id, partner_id, context)


async def start_chat(chat_id, partner_id, context):
    chat_pairs[chat_id] = partner_id
    chat_pairs[partner_id] = chat_id

    await safe_send(context.bot, chat_id, "send_message", text="–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç.")
    await safe_send(context.bot, partner_id, "send_message",
                    text="–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç.")

    for sender_id, receiver_id in [(chat_id, partner_id), (partner_id, chat_id)]:
        profile = load_profile(sender_id)

        if profile:
            text = profile.get('text', '')
            media_id = profile.get('media_id')
            media_type = profile.get('media_type')

            if media_id:
                if media_type == 'photo':
                    await safe_send(context.bot, receiver_id, "send_photo", photo=media_id,
                                    caption=f"–ê–Ω–∫–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n{text}")
                elif media_type == 'video':
                    await safe_send(context.bot, receiver_id, "send_video", video=media_id,
                                    caption=f"–ê–Ω–∫–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n{text}")
            elif text:
                await safe_send(context.bot, receiver_id, "send_message", text=f"–ê–Ω–∫–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n{text}")


async def next_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    chat_id = message.chat_id

    if context.user_data.get("profile_creating"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∞–Ω–∫–µ—Ç—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /stop.")
        return

    if context.user_data.get("searching"):
        await message.reply_text("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.")
        return

    if chat_id in user_group:
        await update.message.reply_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")
        return
    await stop(update, context)
    await search(update, context)


async def leave_group(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    code = user_group.pop(chat_id, None)
    if not code:
        return

    room = group_rooms.get(code)
    if not room:
        return

    nickname = custom_nicknames.pop(chat_id, "–ê–Ω–æ–Ω–∏–º")
    room['members'].pop(chat_id, None)

    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    remove_room_member(code, chat_id)
    clear_room_link(chat_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for uid in list(room['members']):
        await safe_send(context.bot, uid, "send_message", text=f"{nickname} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É.")



async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    message = update.message or update.callback_query.message
    if not message:
        return False
    chat_id = message.chat_id

    if chat_id in chat_pairs:
        partner_id = chat_pairs.pop(chat_id)
        chat_pairs.pop(partner_id, None)
        await safe_send(context.bot, partner_id, "send_message", text="–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.")
        await update.message.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥.")
        await send_main_menu(update, context)
        return True


    elif chat_id in waiting_users:

        if chat_id in waiting_users:
            waiting_users.remove(chat_id)

        context.user_data.pop("searching", None)

        await message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞.")
        await send_main_menu(update, context)
        return True


    elif chat_id in user_group:
        await leave_group(chat_id, context)
        await message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã.")
        await send_main_menu(update, context)
        return True

    return False  # –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    chat_id = message.chat_id
    last_seen[chat_id] = datetime.now()

    # === –°–ø–∞–º —Ñ–∏–ª—å—Ç—Ä ===
    if not await anti_spam(update):
        return

    # === –ê–Ω–∫–µ—Ç–∞ ===
    if context.user_data.get('awaiting') == 'profile_text':
        text = message.caption or message.text or ''
        media_id = None
        media_type = None

        if message.photo:
            media_id = message.photo[-1].file_id
            media_type = 'photo'
        elif message.video:
            media_id = message.video.file_id
            media_type = 'video'

        user_profiles[chat_id] = {
            'text': text.strip(),
            'media_id': media_id,
            'media_type': media_type
        }

        context.user_data['awaiting'] = None
        await message.reply_text("–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /search.")
        return

    # === –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ ===
    if chat_id in user_group:
        await group_message(update, context)
        return

    # === –ï—Å–ª–∏ –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ ===
    if chat_id not in chat_pairs:
        await message.reply_text("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –∏–ª–∏ /create_link.")
        return

    # === –ü–µ—Ä–µ–¥–∞—á–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä—É ===
    partner_id = chat_pairs[chat_id]

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ ===
    if message.media_group_id:
        if chat_id not in pending_albums:
            pending_albums[chat_id] = {"media": [], "timeout": None, "caption": None}

        media_group = pending_albums[chat_id]["media"]
        if message.caption:
            pending_albums[chat_id]["caption"] = message.caption

        if message.photo:
            media_group.append(InputMediaPhoto(message.photo[-1].file_id))
        elif message.video:
            media_group.append(InputMediaVideo(message.video.file_id))

        jobs = context.job_queue.get_jobs_by_name(f"album_{chat_id}")
        for job in jobs:
            job.schedule_removal()

        pending_albums[chat_id]["timeout"] = context.job_queue.run_once(
            send_album, ALBUM_TIMEOUT, chat_id=chat_id, name=f"album_{chat_id}", data=partner_id
        )
        return

    # === –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π ===
    if message.text:
        await safe_send(context.bot, partner_id, "send_message", text=message.text)
    elif message.sticker:
        await safe_send(context.bot, partner_id, "send_sticker", sticker=message.sticker.file_id)
    elif message.photo:
        await safe_send(context.bot, partner_id, "send_photo", photo=message.photo[-1].file_id, caption=message.caption)
    elif message.voice:
        await safe_send(context.bot, partner_id, "send_voice", voice=message.voice.file_id)
    elif message.video:
        await safe_send(context.bot, partner_id, "send_video", video=message.video.file_id, caption=message.caption)
    elif message.document:
        await safe_send(context.bot, partner_id, "send_document", document=message.document.file_id, caption=message.caption)



async def send_album(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    partner_id = job.data

    if chat_id not in pending_albums:
        return

    album_data = pending_albums.pop(chat_id)
    media = album_data["media"]
    caption = album_data["caption"] or f"–û—Ç–ø—Ä–∞–≤–∏–ª {user_nicknames}"

    if not media:
        return

    if caption:
        first = media[0]
        if isinstance(first, InputMediaPhoto):
            media[0] = InputMediaPhoto(media=first.media, caption=caption)
        elif isinstance(first, InputMediaVideo):
            media[0] = InputMediaVideo(media=first.media, caption=caption)
    await context.bot.send_media_group(chat_id=partner_id, media=media)


def is_user_busy(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    return (
            context.user_data.get("profile_creating")
            or context.user_data.get("searching")
            or chat_id in chat_pairs
            or chat_id in user_group
    )


async def universal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):

    if not update.message:
        return

    chat_id = update.message.chat_id

    if context.user_data.get("awaiting_interests"):
        message = update.message
        if message.text:
            text = message.text.lower()
            interests = set(i.strip() for i in text.split(",") if i.strip())
            user_interests[chat_id] = interests
            context.user_data.pop("awaiting_interests")
            await message.reply_text("–ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        else:
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Ç–µ–∫—Å—Ç–æ–º.")
        return

    if not await anti_spam(update):
        return

    if context.user_data.get("profile_creating"):
        await handle_profile_text(update, context)
        return

    if chat_id in user_group:
        await group_message(update, context)
        return

    if chat_id in chat_pairs:
        await handle_message(update, context)
        return

    await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –∏–ª–∏ /create_link.")

if __name__ == "__main__":
    init_db()
    restore_rooms()
    restore_all_users()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # === –ö–û–ú–ê–ù–î–´ (–ü–û–†–Ø–î–û–ö –í–ê–ñ–ï–ù) ===
    # –û—Å–Ω–æ–≤–Ω—ã–µ
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("interests", set_interests))
    app.add_handler(CommandHandler("search", search))
    app.add_handler(CommandHandler("stop", stop))  # –¥–æ MessageHandler!
    app.add_handler(CommandHandler("next", next_chat))
    app.add_handler(CommandHandler("stats", stats))

    # –ü—Ä–æ—Ñ–∏–ª–∏
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("my_profile", my_profile))
    app.add_handler(CommandHandler("delete_profile", delete_profile))
    app.add_handler(CommandHandler("view_profile", view_profile))
    app.add_handler(CommandHandler("create_link", create_link))
    app.add_handler(CommandHandler("join", join))
    app.add_handler(CommandHandler("cancel_link", cancel_link))

    # –ì—Ä—É–ø–ø—ã –∏ –Ω–∏–∫–∏
    app.add_handler(CommandHandler("create_group", create_group))
    app.add_handler(CommandHandler("rooms", list_active_rooms))
    app.add_handler(CommandHandler("list_users", list_users))
    app.add_handler(CommandHandler("nick", change_nickname))
    app.add_handler(CommandHandler("set_global_nick", set_global_nick))
    app.add_handler(CommandHandler("description", set_description))

    # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ
    app.add_handler(CommandHandler("mod", mod_commands))
    app.add_handler(CommandHandler("kick", kick_user))
    app.add_handler(CommandHandler("mute", mute_user))
    app.add_handler(CommandHandler("unmute", unmute_user))
    app.add_handler(CommandHandler("ban", ban_user))
    app.add_handler(CommandHandler("delete_group", delete_group))
    app.add_handler(CommandHandler("set_welcome", set_welcome))
    app.add_handler(CommandHandler("preview_welcome", preview_welcome))
    app.add_handler(CommandHandler("close_group", close_group))
    app.add_handler(CommandHandler("open_group", open_group))
    app.add_handler(CommandHandler("make_private", make_private))
    app.add_handler(CommandHandler("make_public", make_public))
    app.add_handler(CommandHandler("announce", announce))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, universal_handler))

    # === –ê–ù–ö–ï–¢–ê ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –≤–≤–æ–¥–∏—Ç ===
    app.add_handler(MessageHandler(
        filters.TEXT | filters.PHOTO | filters.VIDEO,
        handle_profile_text
    ))

    # === –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===


    print("–ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å–µ—Ç—å –∑–∞–ø—É—â–µ–Ω–∞!")
    app.run_polling()  #


